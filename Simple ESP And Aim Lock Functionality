local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")

local ESPEnabled = false
local TracerEnabled = false
local TurnLockEnabled = false
local InfoDisplayEnabled = true
local DraggableInfoDisplay = false
local BoxHandles = {}
local TracerHandles = {}
local BlueOrb, RedOrb, ConnectorLine

-- Create orbs and connector
local function CreateOrbs()
    if not BlueOrb then
        BlueOrb = Instance.new("Part")
        BlueOrb.Shape = Enum.PartType.Ball
        BlueOrb.Color = Color3.fromRGB(0, 0, 255)
        BlueOrb.Material = Enum.Material.Neon
        BlueOrb.Size = Vector3.new(1, 1, 1)
        BlueOrb.Anchored = true
        BlueOrb.CanCollide = false
        BlueOrb.Parent = workspace
    end

    if not RedOrb then
        RedOrb = Instance.new("Part")
        RedOrb.Shape = Enum.PartType.Ball
        RedOrb.Color = Color3.fromRGB(255, 0, 0)
        RedOrb.Material = Enum.Material.Neon
        RedOrb.Size = Vector3.new(1, 1, 1)
        RedOrb.Anchored = true
        RedOrb.CanCollide = false
        RedOrb.Parent = workspace
    end

    if not ConnectorLine then
        ConnectorLine = Instance.new("Part")
        ConnectorLine.Size = Vector3.new(0.2, 0.2, 0.2)
        ConnectorLine.Anchored = true
        ConnectorLine.CanCollide = false
        ConnectorLine.Color = Color3.fromRGB(255, 255, 255)
        ConnectorLine.Material = Enum.Material.Neon
        ConnectorLine.Parent = workspace
    end
end

local function HideOrbs()
    if BlueOrb then BlueOrb.Transparency = 1 end
    if RedOrb then RedOrb.Transparency = 1 end
    if ConnectorLine then ConnectorLine.Transparency = 1 end
end

-- Function to find the nearest player
local function GetNearestPlayer()
    local nearestPlayer
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                nearestPlayer = player
            end
        end
    end
    return nearestPlayer, shortestDistance
end

-- Function to update player rotation and orbs
local function UpdatePlayerRotation()
    if not TurnLockEnabled then
        LockInfo.Visible = false
        HideOrbs()
        return
    end

    CreateOrbs()

    local nearestPlayer, distance = GetNearestPlayer()
    if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local rootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local targetPosition = nearestPlayer.Character.HumanoidRootPart.Position
        rootPart.CFrame = CFrame.new(rootPart.Position, Vector3.new(targetPosition.X, rootPart.Position.Y, targetPosition.Z))

        -- Update orbs and connector
        BlueOrb.Position = rootPart.Position + Vector3.new(0, 3, 0)
        RedOrb.Position = targetPosition + Vector3.new(0, 3, 0)
        BlueOrb.Transparency = 0
        RedOrb.Transparency = 0

        -- Update Connector Line
        ConnectorLine.Transparency = 0
        ConnectorLine.Position = (BlueOrb.Position + RedOrb.Position) / 2
        ConnectorLine.Size = Vector3.new(0.2, 0.2, (BlueOrb.Position - RedOrb.Position).Magnitude)
        ConnectorLine.CFrame = CFrame.new(BlueOrb.Position, RedOrb.Position) * CFrame.new(0, 0, -ConnectorLine.Size.Z / 2)

        -- Update UI
        if InfoDisplayEnabled then
            LockInfo.Visible = true
            LockInfo.Text = "✅ Currently Turning To:" ..
                            "\n👤 @" .. nearestPlayer.Name ..
                            "\n👥 Display Name - " .. nearestPlayer.DisplayName ..
                            "\n📏 Distance: " .. string.format("%.2f", distance)
        end
    else
        LockInfo.Visible = false
        HideOrbs()
    end
end

RunService.Heartbeat:Connect(UpdatePlayerRotation)

-- Function to create ESP box for a player
local function CreateESPBox(player)
    if player == LocalPlayer then return end
    local function onCharacterAdded(character)
        local rootPart = character:WaitForChild("HumanoidRootPart")

        local highlight = Instance.new("BoxHandleAdornment")
        highlight.Size = rootPart.Size + Vector3.new(1, 1, 1)
        highlight.Color3 = Color3.new(1, 0, 0)
        highlight.Transparency = 0.5
        highlight.AlwaysOnTop = true
        highlight.ZIndex = 0
        highlight.Adornee = rootPart
        highlight.Parent = rootPart

        BoxHandles[player] = highlight
    end

    if player.Character then
        onCharacterAdded(player.Character)
    end
    player.CharacterAdded:Connect(onCharacterAdded)
    player.CharacterRemoving:Connect(function()
        RemoveESPBox(player)
    end)
end

local function RemoveESPBox(player)
    if BoxHandles[player] then
        BoxHandles[player]:Destroy()
        BoxHandles[player] = nil
    end
end

-- Function to create Tracer ESP for a player
local function CreateTracer(player)
    if player == LocalPlayer then return end
    local tracer = Drawing.new("Line")
    tracer.Color = Color3.fromRGB(255, 0, 0)
    tracer.Thickness = 1
    tracer.Visible = true

    TracerHandles[player] = tracer

    local function updateTracer()
        local character = player.Character
        local head = character and character:FindFirstChild("Head")
        if TracerEnabled and head then
            local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
            if onScreen then
                tracer.From = Vector2.new(Camera.ViewportSize.X / 2, 0)
                tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                tracer.Visible = true
            else
                tracer.Visible = false
            end
        else
            tracer.Visible = false
        end
    end

    RunService.Heartbeat:Connect(updateTracer)

    player.CharacterAdded:Connect(function()
        updateTracer()
    end)
    player.CharacterRemoving:Connect(function()
        RemoveTracer(player)
    end)
end

local function RemoveTracer(player)
    if TracerHandles[player] then
        TracerHandles[player]:Remove()
        TracerHandles[player] = nil
    end
end

-- Toggles for ESP, Tracer, and Turn Lock
local function ToggleESP(state)
    ESPEnabled = state
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            if state then
                CreateESPBox(player)
            else
                RemoveESPBox(player)
            end
        end
    end
end

local function ToggleTracer(state)
    TracerEnabled = state
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            if state then
                CreateTracer(player)
            else
                RemoveTracer(player)
            end
        end
    end
end

local function ToggleTurnLock(state)
    TurnLockEnabled = state
end

local function ToggleInfoDisplay(state)
    InfoDisplayEnabled = state
end

local function ToggleInfoDraggable(state)
    DraggableInfoDisplay = state
    if DraggableInfoDisplay then
        LockInfo.Active = true
        LockInfo.Draggable = true
    else
        LockInfo.Active = false
        LockInfo.Draggable = false
        LockInfo.Position = initialPosition -- Reset to default position if draggable is off
    end
end

-- Ensure tracers/ESP update when players join or leave
Players.PlayerAdded:Connect(function(player)
    if ESPEnabled then
        CreateESPBox(player)
    end
    if TracerEnabled then
        CreateTracer(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    RemoveESPBox(player)
    RemoveTracer(player)
end)

-- Log Info Display Position
local function LogInfoPosition()
    local position = LockInfo.Position
    print(string.format("Current Position: %.2f, %.2f, %.2f, %.2f", position.X.Offset, position.Y.Offset, position.X.Scale, position.Y.Scale))
end

-- Return functions for GUI usage
return {
    ToggleESP = ToggleESP,
    ToggleTracer = ToggleTracer,
    ToggleTurnLock = ToggleTurnLock,
    ToggleInfoDisplay = ToggleInfoDisplay,
    ToggleInfoDraggable = ToggleInfoDraggable,
    LogInfoPosition = LogInfoPosition
}
