-- Notify (Detect) Saitama Ultimate Activation üü¢üìú

-- Services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local workspace = game:GetService("Workspace")

local localPlayer = Players.LocalPlayer
local animationId = 12447707844 -- Saitama Ultimate Activation animation ID

-- Store the detected players and the time their animation finishes
local detectedPlayers = {}

-- List of moves to check for Saitama Ultimate
local toolNames = {
    "Death Counter",
    "Table Flip",
    "Serious Punch",
    "Omni Directional Punch"
}

-- Function to check if the player is currently performing the animation
local function isPerformingSaitamaAnimation(player)
    local character = player.Character
    if not character or not character:FindFirstChild("Humanoid") then return nil end
    
    local humanoid = character.Humanoid
    -- Check if the humanoid is currently playing the animation
    for _, anim in pairs(humanoid:GetPlayingAnimationTracks()) do
        -- Check if the animation's AnimationId matches the target animation
        if anim.Animation and tostring(anim.Animation.AnimationId) == "rbxassetid://" .. animationId then
            return anim -- Return the animation track for its length
        end
    end
    return nil
end

-- Function to log the player
local function logSaitamaDetectedPlayer(player)
    print("üö® " .. player.Name .. " did the animation to Activate Saitama Ultimate ")
end

-- Function to log checking hotbar for tools
local function checkSaitamaPlayerHotbar(player)
    local backpack = player.Backpack
    local foundTools = 0
    local missedTools = {}

    -- Log checking the hotbar once before starting the checks
    print("‚è≥ Checking " .. player.Name .. "'s Hotbar")

    -- Check each tool in the list
    for _, toolName in pairs(toolNames) do
        -- Check if the tool is in the hotbar
        local tool = backpack:FindFirstChild(toolName)
        if tool then
            foundTools = foundTools + 1
            print("‚öî Found the " .. toolName .. " move in " .. player.Name .. "'s hotbar...")
        else
            table.insert(missedTools, toolName)
            print("üî¥ Couldn't find the " .. toolName .. " move in " .. player.Name .. "'s hotbar...")
        end
    end

    -- Log the final result
    if foundTools == #toolNames then
        print("‚úÖ Found 4/4 Tools In " .. player.Name .. "'s Hotbar")
        return true
    else
        print("‚õî Found " .. foundTools .. "/4 Moves In " .. player.Name .. "'s Hotbar")
        return false
    end
end

-- Function to check the Ulted attribute using the provided method
local function checkSaitamaUltedAttribute(player)
    -- Retrieve the target object from workspace
    local detectedPlayerPath = workspace:WaitForChild("Live"):WaitForChild(player.Name)
    
    -- Check if the object exists
    if detectedPlayerPath then
        local ultedFound = false  -- Flag to track if the Ulted attribute is found
        -- Iterate through all attributes of the object
        for attributeName, attributeValue in pairs(detectedPlayerPath:GetAttributes()) do
            -- Check if the attribute name is 'Ulted'
            if attributeName == "Ulted" then
                -- Log the state (On/Off)
                print("üü¢" .. player.Name .. " has the Ulted Attribute!")
                ultedFound = true  -- Set the flag to true if Ulted is found
                if attributeValue == true then
                    print("‚úÖ The Ulted Attribute is ON for " .. player.Name)
                    return true
                else
                    print("‚õî The Ulted Attribute is OFF for " .. player.Name)
                    return false
                end
            end
        end
        -- If the Ulted attribute was not found
        if not ultedFound then
            print("üî¥ " .. player.Name .. " does not have the Ulted Attribute!")
            return false
        end
    else
        print("‚ùó " .. player.Name .. " not found in workspace.Live")
        return false
    end
end

-- Function to send a notification in CoreGui
local function sendSaitamaNotification(player, message, title)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = message,
        Duration = 5
    })
end

-- Heartbeat check to continuously detect animations
local detectingSaitamaUltimate = false  -- Flag to keep track of detection state

-- Function to start detecting the Saitama Ultimate activation
local function startDetectingSaitamaUltimate()
    detectingSaitamaUltimate = true
    -- Heartbeat check to continuously detect animations
    RunService.Heartbeat:Connect(function()
        if detectingSaitamaUltimate then
            for _, player in pairs(Players:GetPlayers()) do
                -- Exclude the local player
                if player ~= localPlayer then
                    -- Check if this player is performing the animation and hasn't been logged recently
                    local animationTrack = isPerformingSaitamaAnimation(player)
                    if animationTrack and not detectedPlayers[player] then
                        -- Log the player and mark as detected
                        logSaitamaDetectedPlayer(player)
                        detectedPlayers[player] = true
                        
                        -- Wait 1.5 seconds after detecting animation before checking the hotbar
                        wait(1.5)

                        -- Log the check for ultimate
                        print("üîÑ Checking If " .. player.Name .. " actually activated Ultimate...")

                        -- Check the player's hotbar for the tools
                        local movesCheck = checkSaitamaPlayerHotbar(player)

                        -- Wait 0.25 seconds after tools check before checking the attributes
                        wait(0.25)

                        -- Log the proceeding to check attributes
                        print("‚è≥ Proceeding to check " .. player.Name .. "'s Attributes")

                        -- Check the Ulted attribute
                        local attributeCheck = checkSaitamaUltedAttribute(player)

                        -- Calculate the success rate
                        local animationCheck = animationTrack and true or false
                        local animationResult = animationCheck and "‚úÖ" or "‚õî"
                        local movesResult = movesCheck and "‚úÖ" or "‚õî"
                        local attributeResult = attributeCheck and "‚úÖ" or "‚õî"

                        -- Calculate the total percentage chance
                        local chance = 0
                        if animationCheck then chance = chance + 2 end
                        if movesCheck then chance = chance + 18 end
                        if attributeCheck then chance = chance + 80 end

                        -- Log the conclusion
                        print("Conclusion: ")
                        print("Animation Check: " .. animationResult)
                        if animationCheck then print("Might have activated Ultimate ü§∑‚Äç‚ôÇÔ∏è +2%") end
                        print("Moves Check: " .. movesResult)
                        if movesCheck then print("Probably activated Ultimate üëç +18%") end
                        print("Attribute Check: " .. attributeResult)
                        if attributeCheck then print("Definitely activated Ultimate ‚úÖ +80%") end
                        print(string.format("%d/3 Checks Succeeded", (animationCheck and 1 or 0) + (movesCheck and 1 or 0) + (attributeCheck and 1 or 0)))

                        -- Final Conclusion based on the chance
                        if chance < 3 then
                            print("üî¥ " .. player.Name .. " Most likely did not activate Saitama Ultimate.")
                            sendSaitamaNotification(player, "üî¥ " .. player.Name .. " Most likely did not activate Saitama Ultimate.", "Conclusion")
                        elseif chance >= 18 and chance < 20 then
                            print("üü° " .. player.Name .. " Might have activated Saitama Ultimate...")
                            sendSaitamaNotification(player, "üü° " .. player.Name .. " Might have activated Saitama Ultimate...", "Conclusion")
                        elseif chance == 100 then
                            print("üü¢ " .. player.Name .. " Definitely activated Saitama Ultimate!")
                            sendSaitamaNotification(player, "üü¢ " .. player.Name .. " Definitely activated Saitama Ultimate!", "Conclusion")
                        end

                        -- Wait until the animation finishes, plus an extra 0.25 seconds buffer
                        wait(animationTrack.Length + 0.25)

                        -- Remove the player from the detected list after the wait
                        detectedPlayers[player] = nil
                    end
                end
            end
        end
    end)
end

-- Function to stop detecting the Saitama Ultimate activation
local function stopDetectingSaitamaUltimate()
    detectingSaitamaUltimate = false
end

-- Notify (Detect) Saitama Death Counter Activation üü¢üìú

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Table to track the cooldown for each player
local playerCooldowns = {}

-- Cooldown duration (in seconds)
local cooldownDuration = 1.5
local ESPParts = {} -- Stores ESP parts for cleanup

-- Function to send the Death Counter notification
local function sendDeathCounterNotification(player)
    StarterGui:SetCore("SendNotification", {
        Title = "üü¢ " .. player.Name .. " Activated Death Counter",
        Text = "When this notification disappears, then their Death Counter is gone",
        Duration = 10.5 -- Notification duration set to 10.5 seconds
    })
end

-- Function to create a red ESP box
local function createESPBox(part)
    local box = Instance.new("BoxHandleAdornment")
    box.Adornee = part
    box.AlwaysOnTop = true
    box.ZIndex = 10
    box.Size = part.Size
    box.Color3 = Color3.new(1, 0, 0) -- Red color
    box.Transparency = 0.01
    box.Parent = part
    return box
end

-- Function to add red ESP for a player
local function addPlayerESP(player)
    local character = player.Character
    if not character then return end

    -- Remove any existing ESP parts for this player
    if ESPParts[player] then
        for _, espPart in ipairs(ESPParts[player]) do
            espPart:Destroy()
        end
    end

    ESPParts[player] = {} -- Reset ESP parts for this player

    -- Parts to highlight
    local parts = {
        character:WaitForChild("Head"),
        character:WaitForChild("Left Arm"),
        character:WaitForChild("Right Arm"),
        character:WaitForChild("Left Leg"),
        character:WaitForChild("Right Leg"),
        character:WaitForChild("Torso")
    }

    for _, part in ipairs(parts) do
        local box = createESPBox(part)
        table.insert(ESPParts[player], box)
    end

    -- Schedule ESP removal after 10.25 seconds
    task.delay(10.25, function()
        removePlayerESP(player)
    end)
end

-- Function to remove ESP for a player
local function removePlayerESP(player)
    if ESPParts[player] then
        for _, espPart in ipairs(ESPParts[player]) do
            espPart:Destroy()
        end
        ESPParts[player] = nil
    end
end

-- Function to add a "Death Counter! üíÄ" billboard above the detected player's head
local function addBillboardText(player)
    local character = player.Character
    if not character or not character:FindFirstChild("Head") then return end

    -- Create the BillboardGui
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "DeathCounterBillboard"
    billboard.Adornee = character.Head
    billboard.Size = UDim2.new(0, 100, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 4.75, 0)
    billboard.AlwaysOnTop = true

    -- Create the TextLabel
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextScaled = false
    label.TextSize = 20
    label.Font = Enum.Font.SourceSansBold
    label.Text = "Death Counter! üíÄ"
    label.TextColor3 = Color3.new(1, 0, 0) -- Red text
    label.Parent = billboard

    -- Parent the BillboardGui to the character's head
    billboard.Parent = character.Head

    -- Automatically remove the billboard after 10.25 seconds
    task.delay(10.25, function()
        if billboard and billboard.Parent then
            billboard:Destroy()
        end
    end)
end

-- Detect Death Counter Animation Functionality

-- Function to check for the "HoldingDeathCounter" attribute
local function checkHoldingDeathCounter(player)
    -- Retrieve the target object from workspace
    local detectedPlayerPath = Workspace:WaitForChild("Live"):FindFirstChild(player.Name)

    -- Check if the object exists
    if detectedPlayerPath then
        -- Get the "HoldingDeathCounter" attribute
        local holdingDeathCounter = detectedPlayerPath:GetAttribute("HoldingDeathCounter")

        -- If the attribute exists and is true
        if holdingDeathCounter then
            -- Get the current time
            local currentTime = os.clock()

            -- Check if the cooldown has elapsed for this player
            if not playerCooldowns[player.Name] or (currentTime - playerCooldowns[player.Name] >= cooldownDuration) then
                -- Update the cooldown time for this player
                playerCooldowns[player.Name] = currentTime

                -- Send the notification
                sendDeathCounterNotification(player)

                -- Add the billboard above the player's head
                addBillboardText(player)

                -- Add red ESP for the player
                addPlayerESP(player)
            end
        else
            -- Remove the player from cooldowns if the attribute is false or nil
            playerCooldowns[player.Name] = nil
        end
    else
        print("‚ùó " .. player.Name .. " not found in workspace.Live")
    end
end

-- Heartbeat check to continuously detect the "HoldingDeathCounter" attribute
local detectingDeathCounter = false

-- Function to start detecting the Death Counter activation
local function startDetectingDeathCounter()
    detectingDeathCounter = true
    RunService.Heartbeat:Connect(function()
        if detectingDeathCounter then
            for _, player in pairs(Players:GetPlayers()) do
                -- Exclude the local player
                if player ~= LocalPlayer then
                    -- Check if this player has the "HoldingDeathCounter" attribute
                    checkHoldingDeathCounter(player)
                end
            end
        end
    end)
end

-- Function to stop detecting the Death Counter activation
local function stopDetectingDeathCounter()
    detectingDeathCounter = false
end

-- Notify (Detect) Garou Ultimate Activation üü¢üìú

-- Services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")

local localPlayer = Players.LocalPlayer
local animationId = 12342141464 -- Garou Ultimate Activation animation ID

-- Store the detected players and the time their animation finishes
local detectedPlayers = {}
local ESPParts = {} -- Stores ESP parts for cleanup

-- Function to create a box
local function createESPBox(part, color)
    local box = Instance.new("BoxHandleAdornment")
    box.Adornee = part
    box.AlwaysOnTop = true
    box.ZIndex = 10
    box.Size = part.Size
    box.Color3 = color -- Dynamic color
    box.Transparency = 0.01
    box.Parent = part
    return box
end

-- Function to add ESP for a player
local function addPlayerESP(player)
    local character = player.Character
    if not character then return end

    -- Remove any existing ESP parts for this player
    if ESPParts[player] then
        for _, espPart in ipairs(ESPParts[player]) do
            espPart:Destroy()
        end
    end

    ESPParts[player] = {} -- Reset ESP parts for this player

    -- Parts to highlight
    local parts = {
        character:WaitForChild("Head"),
        character:WaitForChild("Left Arm"),
        character:WaitForChild("Right Arm"),
        character:WaitForChild("Left Leg"),
        character:WaitForChild("Right Leg"),
        character:WaitForChild("Torso")
    }

    for _, part in ipairs(parts) do
        local color = Color3.new(1, 0, 0) -- Default red
        if part.Name == "Torso" then
            color = Color3.new(0, 255, 255) -- Blue for the torso
        end
        local box = createESPBox(part, color)
        table.insert(ESPParts[player], box)
    end
end

-- Function to remove ESP for a player
local function removePlayerESP(player)
    if ESPParts[player] then
        for _, espPart in ipairs(ESPParts[player]) do
            espPart:Destroy()
        end
        ESPParts[player] = nil
    end
end

-- Function to add a billboard text over the player's head
local function addBillboardText(player, text)
    local character = player.Character
    if not character or not character:FindFirstChild("Head") then return end

    -- Create the BillboardGui
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "GarouUltimateBillboard"
    billboard.Adornee = character.Head
    billboard.Size = UDim2.new(0, 100, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true

    -- Create the TextLabel
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextScaled = true
    label.Font = Enum.Font.SourceSansBold
    label.Text = text
    label.TextColor3 = Color3.new(0, 255, 255) -- Yellow text
    label.Parent = billboard

    -- Parent the BillboardGui to the character's head
    billboard.Parent = character.Head
end

-- Function to remove the billboard text from the player's head
local function removeBillboardText(player)
    local character = player.Character
    if not character or not character:FindFirstChild("Head") then return end

    local billboard = character.Head:FindFirstChild("GarouUltimateBillboard")
    if billboard then
        billboard:Destroy()
    end
end

-- Function to check if the player is currently performing the animation
local function isPerformingGarouAnimation(player)
    local character = player.Character
    if not character or not character:FindFirstChild("Humanoid") then return nil end
    
    local humanoid = character.Humanoid
    -- Check if the humanoid is currently playing the animation
    for _, anim in pairs(humanoid:GetPlayingAnimationTracks()) do
        -- Check if the animation's AnimationId matches the target animation
        if anim.Animation and tostring(anim.Animation.AnimationId) == "rbxassetid://" .. animationId then
            return anim -- Return the animation track for its length
        end
    end
    return nil
end

-- Function to log the player
local function logGarouDetectedPlayer(player)
    print("üö® " .. player.Name .. " did the animation to Activate Garou Ultimate ")
end

-- Function to send a notification in CoreGui
local function sendGarouNotification(player, message, title)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = message,
        Duration = 5
    })
end

-- Heartbeat check to continuously detect animations
local detectingGarouUltimate = false -- Flag to keep track of detection state

-- Function to start detecting the Garou Ultimate activation
local function startDetectingGarouUltimate()
    detectingGarouUltimate = true
    -- Heartbeat check to continuously detect animations
    RunService.Heartbeat:Connect(function()
        if detectingGarouUltimate then
            for _, player in pairs(Players:GetPlayers()) do
                -- Exclude the local player
                if player ~= localPlayer then
                    -- Check if this player is performing the animation and hasn't been logged recently
                    local animationTrack = isPerformingGarouAnimation(player)
                    if animationTrack and not detectedPlayers[player] then
                        -- Log the player and mark as detected
                        logGarouDetectedPlayer(player)
                        detectedPlayers[player] = true
                        
                        -- Send the notification to inform about the animation detection
                        sendGarouNotification(player, 
                            "üü° " .. player.Name .. " probably activated Garou Ultimate because they did the animation. Be careful!", 
                            "Garou Ultimate Detected")
                        
                        -- Add ESP to the player
                        addPlayerESP(player)

                        -- Add the billboard text
                        addBillboardText(player, "üü° Activating Garou Ultimate...")

                        -- Wait until the animation finishes, plus an extra 0.25 seconds buffer
                        wait(animationTrack.Length - 1)

                        -- Remove the ESP and billboard text
                        removePlayerESP(player)
                        removeBillboardText(player)

                        -- Remove the player from the detected list
                        detectedPlayers[player] = nil
                    end
                end
            end
        end
    end)
end

-- Function to stop detecting the Garou Ultimate activation
local function stopDetectingGarouUltimate()
    detectingGarouUltimate = false
end

-- Anti Death Counter Functionality üü¢

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Variables
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local antiDeathCounterEnabled = false -- Toggle state variable
local animationId = "rbxassetid://11343250001" -- Animation ID

-- Function to update character and humanoid references on respawn
local function updateCharacterReferences()
    Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    Humanoid = Character:WaitForChild("Humanoid")
end

-- Function to generate random position
local function getRandomPosition(currentPosition)
    local randomX = math.random(20000, 50000) * (math.random(0, 1) == 0 and -1 or 1)
    local randomZ = math.random(20000, 50000) * (math.random(0, 1) == 0 and -1 or 1)
    return Vector3.new(currentPosition.X + randomX, -499, currentPosition.Z + randomZ)
end

-- Main functionality
local function handleDeathCounter()
    print("üö® Your player seems to have gotten Death Countered")

    -- Save current camera state and position
    local originalCFrame = Camera.CFrame
    local originalFocus = Camera.Focus
    local playerPosition = Character.PrimaryPart.Position

    -- Change camera to custom state
    Camera.CameraType = Enum.CameraType.Scriptable
    Camera.CFrame = originalCFrame

    -- Create platform at a distant random location
    local platformPosition = getRandomPosition(playerPosition)
    local platform = Instance.new("Part")
    platform.Size = Vector3.new(1500, 1, 1500)
    platform.Position = platformPosition
    platform.Anchored = true
    platform.Transparency = 1
    platform.Material = Enum.Material.Neon
    platform.BrickColor = BrickColor.Red()
    platform.Parent = workspace

    -- Teleport player to platform
    Character:SetPrimaryPartCFrame(CFrame.new(platformPosition + Vector3.new(0, 1, 0)))

    -- Wait 13 seconds before reverting
    task.delay(13, function()
        -- Teleport player back
        Character:SetPrimaryPartCFrame(CFrame.new(playerPosition))

        -- Remove platform
        platform:Destroy()

        -- Restore camera state
        Camera.CameraType = Enum.CameraType.Custom
        Camera.CFrame = originalCFrame
        Camera.Focus = originalFocus
    end)
end

-- Function to detect animation
local function detectDeathCounter()
    Humanoid.AnimationPlayed:Connect(function(animationTrack)
        -- Check toggle state and animation ID
        if antiDeathCounterEnabled and animationTrack.Animation.AnimationId == animationId then
            handleDeathCounter()
        end
    end)
end

-- Listen for character respawns to reapply detection logic
LocalPlayer.CharacterAdded:Connect(function()
    updateCharacterReferences()
    detectDeathCounter()
end)

-- Initial setup
detectDeathCounter()

-- Services
local StarterGui = game:GetService("StarterGui")

-- Helper function for notifications
local function sendNotification(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5 -- Default duration is 5 seconds
    })
end

-- Now load the UI
local SunHubTSBGArena = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = SunHubTSBGArena:CreateWindow({
    Title = "TSBG - Arena",
    SubTitle = "by Lib",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

-- Fluent provides Lucide Icons, they are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Exploits = Window:AddTab({ Title = "Exploits", Icon = "binary" }),
    Visual = Window:AddTab({ Title = "Visual", Icon = "eye" })

}

local DetectSection = Tabs.Visual:AddSection("Detect")

local SaitamaDetectSection = Tabs.Visual:AddSection("Detect - Saitama")

-- Saitama Ultimate Detection Toggle
local DetectSaitamaUltimateToggle = SaitamaDetectSection:AddToggle("Detect Saitama Ultimate", 
{
    Title = "Detect Saitama Ultimate Activation", 
    Description = "Will detect and notify you when another player activates Saitama Ultimate.",
    Default = false,
    Callback = function(state)
        if state then
            -- Enable detection when toggle is turned on
            sendNotification("Saitama Ultimate Detection", "ON - Notifying Saitama Ultimate Activation. üü¢", 5)
            startDetectingSaitamaUltimate()  -- Start detecting Saitama Ultimate
        else
            -- Disable detection when toggle is turned off
            sendNotification("Saitama Ultimate Detection", "OFF - Not Notifying Saitama Ultimate Activation. üî¥", 5)
            stopDetectingSaitamaUltimate()  -- Stop detecting Saitama Ultimate
        end
    end 
})

local DetectSaitamaDeathCounterToggle = SaitamaDetectSection:AddToggle("Detect Saitama Death Counter", 
{
    Title = "Detect Death Counter Activation", 
    Description = "Will detect and notify you when another player activates Saitama Death Counter.",
    Default = false,
    Callback = function(state)
        if state then
            sendNotification("Death Counter Detection", "ON - Notifying Death Counter Activation. üü¢", 5)
            startDetectingDeathCounter()  -- Start the Death Counter detection
        else
            sendNotification("Death Counter Detection", "OFF - Not Notifying Death Counter Activation. üî¥", 5)
            stopDetectingDeathCounter()  -- Stop the Death Counter detection
        end
    end 
})

local GarouDetectSection = Tabs.Visual:AddSection("Detect - Garou")

-- Garou Ultimate Detection Toggle (added below Saitama toggle)
local DetectGarouUltimateToggle = GarouDetectSection:AddToggle("Detect Garou Ultimate", 
{
    Title = "Detect Garou Ultimate Activation", 
    Description = "Will detect and notify you when another player activates Garou Ultimate.",
    Default = false,
    Callback = function(state)
        if state then
            -- Enable detection when toggle is turned on
            sendNotification("Garou Ultimate Detection", "ON - Notifying Garou Ultimate Activation. üü¢", 5)
            startDetectingGarouUltimate()  -- Start detecting Garou Ultimate
        else
            -- Disable detection when toggle is turned off
            sendNotification("Garou Ultimate Detection", "OFF - Not Notifying Garou Ultimate Activation. üî¥", 5)
            stopDetectingGarouUltimate()  -- Stop detecting Garou Ultimate
        end
    end 
})

local AntiSection = Tabs.Exploits:AddSection("Anti")

-- New toggle for Anti-Death Counter
local AntiDeathCounterToggle = AntiSection:AddToggle("AntiDeathCounterToggle", 
{
    Title = "Anti Death Counter", 
    Description = "Will kill the person who death countered you, and will save you from dying to the death counter.",
    Default = false,
    Callback = function(state)
        antiDeathCounterEnabled = state
        if state then
            sendNotification("Anti Death Counter", "ON - Anti Death Counter is on. üü¢", 5)
        else
            sendNotification("Anti Death Counter", "OFF - Anti Death Counter is off. üî¥", 5)
        end
    end
})
